hybrid reachability
{
 state var x1, x2, x3, x4, x1_hat, x2_hat, x3_hat, x4_hat, dt, gt, length, missct, mdadt, mdadtl1

 par
 {
  Kmax = 20  mmax = 10  h = 0.04  h10 = 0.08  h100 = 0.12  h1000 = 0.16  mdadt1 = 4  mdadt1h = 0.16  a11 = 0  a12 = 1  a13 = 0  a14 = 0  a21 = -8  a22 = -4  a23 = 8  a24 = 4  a31 = 0  a32 = 0  a33 = 0  a34 = 1  a41 = 80  a42 = 40  a43 = -160  a44 = -60  b11 = 0  b21 = 80  b31 = 20  b41 = -1120  c11 = 1  c12 = 0  c13 = 0  c14 = 0  ad11 = 0.995860265603438  ad12 = 0.0378696105301410  ad13 = 0.002126692778129  ad14 = 0.001604928255535  ad21 = -0.174562623798343  ad22 = 0.908578953704267  ad23 = 0.046168363355559  ad24 = 0.057309439566604  ad31 = 0.0311138708080227  ad32 = 0.0160492825553481  ad33 = 0.935759216765522  ad34 = 0.0151544413769853  ad41 = 1.083961049716042  ad42 = 0.573094395666044  ad43 = -2.296316359874869  ad44 = 0.0906898643677941  bd11 = 0.0341116067291290  bd21 = 1.274583051774871  bd31 = 0.336215739966162  bd41 = -16.973847402485298  k1 = 3.698404852057682  k2 = 0.527354601469351  k3 = -0.056946984711634  k4 = 0.0311945072320842  l1 = 0.627216669816835  l2 = 0.077667216653487  l3 = 0.033503186827615  l4 = 0.804439585315103
 }

 setting
 {
  fixed steps 0.0001
  time 1
  remainder estimation 1e-3
  identity precondition
  gnuplot octagon gt , x1
  fixed orders 18
  cutoff 1e-8
  precision 53
  output suscon_test_121dt_20_10
  max jumps 20
  print on
 }

 modes
 {
  l0
  {
   poly ode 1
   {
    x1' = 0
    x2' = 0
    x3' = 0
    x4' = 0
    x1_hat' = 0
    x2_hat' = 0
    x3_hat' = 0
    x4_hat' = 0
    dt' = 0
    gt' = 0
    length' = 0
    missct' = 0
    mdadt' = 0
    mdadtl1' = 0
   }
   inv
   {
    length = 0
    missct = 0
   }
  }
  l1
  {
   poly ode 1
   {
    x1' = a11*x1 + a12*x2 + a13*x3 + a14*x4 - b11*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x2' = a21*x1 + a22*x2 + a23*x3 + a24*x4 - b21*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x3' = a31*x1 + a32*x2 + a33*x3 + a34*x4 - b31*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x4' = a41*x1 + a42*x2 + a43*x3 + a44*x4 - b41*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x1_hat' = 0
    x2_hat' = 0
    x3_hat' = 0
    x4_hat' = 0
    dt' = 1
    gt' = 1
    length' = 0
    missct' = 0
    mdadt' = 0
    mdadtl1' = 0
   }
   inv
   {
    length <= Kmax
    missct <= mmax
   }
  }
  l1dt
  {
   poly ode 1
   {
    x1' = a11*x1 + a12*x2 + a13*x3 + a14*x4 - b11*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x2' = a21*x1 + a22*x2 + a23*x3 + a24*x4 - b21*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x3' = a31*x1 + a32*x2 + a33*x3 + a34*x4 - b31*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x4' = a41*x1 + a42*x2 + a43*x3 + a44*x4 - b41*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x1_hat' = 0
    x2_hat' = 0
    x3_hat' = 0
    x4_hat' = 0
    dt' = 1
    gt' = 1
    length' = 0
    missct' = 0
    mdadt' = 0
    mdadtl1' = 0
   }
   inv
   {
    length <= Kmax
    missct <= mmax
   }
  }
  l10
  {
   poly ode 1
   {
    x1' = a11*x1 + a12*x2 + a13*x3 + a14*x4 - b11*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x2' = a21*x1 + a22*x2 + a23*x3 + a24*x4 - b21*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x3' = a31*x1 + a32*x2 + a33*x3 + a34*x4 - b31*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x4' = a41*x1 + a42*x2 + a43*x3 + a44*x4 - b41*(k1*x1_hat + k2*x2_hat - k3*x3_hat + k4*x4_hat)
    x1_hat' = 0
    x2_hat' = 0
    x3_hat' = 0
    x4_hat' = 0
    dt' = 1
    gt' = 1
    length' = 0
    missct' = 0
    mdadt' = 0
    mdadtl1' = 0
   }
   inv
   {
    length <= Kmax
    missct <= mmax
   }
  }
 }

  
 jumps
 {
  l0 -> l1
  guard { length = 0  missct = 0  dt = 0 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 0
    mdadtl1' := mdadtl1 + 1
  }
  interval aggregation

  l0 -> l10
  guard { length = 0  missct = 0  dt = 0 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 2
    missct' := missct + 1
    dt' := 0
  }
  interval aggregation

  l0 -> l1dt
  guard { length = 0  missct = 0  dt = 0 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 0
  }
  interval aggregation

  l1 -> l1
  guard { length + 1 <= Kmax  missct <= mmax  dt = h }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 0
    mdadtl1' := mdadtl1 + 1
  }
  interval aggregation

  l1 -> l10
  guard { length + 2 <= Kmax  missct + 1 <= mmax  dt = h }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 2
    missct' := missct + 1
    dt' := 0
  }
  interval aggregation

  l1 -> l1dt
  guard { length + mdadt1 + 1 <= Kmax  missct <= mmax  dt = h  mdadtl1 + 1 <= mdadt1}
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 0
    mdadt' := mdadt1 - 2
    mdadtl1' := mdadt1
  }
  interval aggregation

  l10 -> l1
  guard { length + 1 <= Kmax  missct <= mmax  dt = h10 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 0
    mdadtl1' := 0
  }
  interval aggregation

  l10 -> l10
  guard { length + 2 <= Kmax  missct + 1 <= mmax  dt = h10 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 2
    missct' := missct + 1
    dt' := 0
  }
  interval aggregation

  l10 -> l1dt
  guard { length + mdadt1 <= Kmax  missct <= mmax  dt = h10  mdadt +1 <= mdadt1}
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 3
    missct' := missct + 2
    dt' := 0
    mdadt' := mdadt1 - 1
    mdadtl1' := mdadt1
  }
  interval aggregation

  l1dt -> l1dt
  guard { length + mdadt <= Kmax  missct <= mmax  dt = h mdadt >= 1 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 0
    mdadt' := mdadt - 1
  }
  interval aggregation

  l1dt -> l10
  guard { length + 2 <= Kmax  missct + 1 <= mmax  dt = mdadt1h  mdadt = 0 }
  reset {
    x1_hat' := l1*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad11*x1_hat + ad12*x2_hat + ad13*x3_hat + ad14*x4_hat - bd11*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l1*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x2_hat' := l2*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad21*x1_hat + ad22*x2_hat + ad23*x3_hat + ad24*x4_hat - bd21*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l2*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x3_hat' := l3*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad31*x1_hat + ad32*x2_hat + ad33*x3_hat + ad34*x4_hat - bd31*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l3*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    x4_hat' := l4*(c11*x1 + c12*x2 + c13*x3 + c14*x4) + ad41*x1_hat + ad42*x2_hat + ad43*x3_hat + ad44*x4_hat - bd41*(k1*x1_hat + k2*x2_hat + k3*x3_hat + k4*x4_hat) - l4*(c11*x1_hat + c12*x2_hat + c13*x3_hat + c14*x4_hat)
    length' := length + 1
    missct' := missct + 0
    dt' := 1
    mdadt' := mdadt - 1
  }
  interval aggregation
 }

 init
 {
  l0
  {
   x1 in [-1,-0.99]
   x2 in [-50,-49.95]
   x3 in [-20,15.95]
   x4 in [-100,-99.95]
   x1_hat in [-1,-0.99]
   x2_hat in [-50,-49.950]
   x3_hat in [-20,15.95]
   x4_hat in [-100,-99.95]
   dt in [0,0]
   gt in [0,0]
   length in [0,0]
   missct in [0,0]
   mdadt in [4,4]
   mdadtl1 in [0,0]
  }
 }
}

unsafe
{
  l0 
  { 
    1 * x1 >= 2  -1 * x1 >= 2  
    x2 >= 200  x2 <= -200  
    x3 >= 100  x3 <= -100  
    x4 >= 600  x4 <= -600 
  }
  l1 
  { 
    x1 >= 2  x1 <= -2  
    x2 >= 200  x2 <= -200  
    x3 >= 100  x3 <= -100  
    x4 >= 600  x4 <= -600 
  }
  l10 
  { 
    x1 >= 2  x1 <= -2  
    x2 >= 200  x2 <= -200  
    x3 >= 100  x3 <= -100  
    x4 >= 600  x4 <= -600 
  }
  l1dt 
  { 
    x1 >= 2  x1 <= -2  
    x2 >= 200  x2 <= -200  
    x3 >= 100  x3 <= -100  
    x4 >= 600  x4 <= -600 
    mdadt >= 1
  }
}
